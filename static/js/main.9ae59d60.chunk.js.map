{"version":3,"sources":["serviceWorker.js","Components/Navbar/Navbar.jsx","Components/Slideshow/Slideshow.jsx","Views/Home.jsx","App/App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","Navbar","onMenuClick","className","id","viewBox","onClick","d","href","target","rel","title","to","Slideshow","Home","document","getElementById","classList","contains","remove","toggle","this","Component","App","exact","path","component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECgDSC,G,MA3DA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChB,OACE,4BAAQC,UAAU,oBAChB,yBACEA,UAAU,UACVC,GAAG,UACHC,QAAQ,cACRC,QAASJ,GAET,0BACEC,UAAU,iCACVI,EAAE,0GAEJ,0BAAMJ,UAAU,oCAAoCI,EAAE,iBACtD,0BACEJ,UAAU,oCACVI,EAAE,oGAIN,yBAAKJ,UAAU,mBAAmBC,GAAG,mBACnC,yBAAKD,UAAU,wBACb,4BACE,4BACE,4FAIF,4BACE,uBACEK,KAAK,wCACLC,OAAO,SACPC,IAAI,sBACJC,MAAM,uBAJR,cASF,4BACE,uBACEH,KAAK,iIACLC,OAAO,SACPC,IAAI,sBACJC,MAAM,4CAJR,eAaR,kBAAC,IAAD,CAAMC,GAAG,IAAIT,UAAU,WACrB,wCCrDOU,EAJG,WAChB,OAAO,yBAAKT,GAAG,iBAAiBD,UAAU,oBCgC7BW,E,2MA5BbZ,YAAc,WAETa,SAASC,eAAe,WAAWC,UAAUC,SAAS,oBAOvDH,SAASC,eAAe,WAAWC,UAAUE,OAAO,mBACpDJ,SACGC,eAAe,mBACfC,UAAUE,OAAO,2BARpBJ,SAASC,eAAe,WAAWC,UAAUG,OAAO,mBACpDL,SACGC,eAAe,mBACfC,UAAUG,OAAO,2B,wEAUtB,OACE,oCACE,yBAAKjB,UAAU,0BACb,kBAAC,EAAD,CAAQD,YAAamB,KAAKnB,eAE5B,kBAAC,EAAD,W,GAvBWoB,aCeJC,EAZH,WACV,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,UAAWZ,QCL1Ca,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASC,eAAe,gBLyH3C,kBAAmBa,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ae59d60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import react packages\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import styles\r\nimport \"./Navbar.scss\";\r\n\r\nconst Navbar = ({ onMenuClick }) => {\r\n  return (\r\n    <header className=\"ad-navbar navbar\">\r\n      <svg\r\n        className=\"ad-menu\"\r\n        id=\"ad-menu\"\r\n        viewBox=\"0 0 100 100\"\r\n        onClick={onMenuClick}\r\n      >\r\n        <path\r\n          className=\"ad-menu-line ad-menu-line--top\"\r\n          d=\"m 30,33 h 40 c 3.722839,0 7.5,3.126468 7.5,8.578427 0,5.451959 -2.727029,8.421573 -7.5,8.421573 h -20\"\r\n        />\r\n        <path className=\"ad-menu-line ad-menu-line--middle\" d=\"m 30,50 h 40\" />\r\n        <path\r\n          className=\"ad-menu-line ad-menu-line--bottom\"\r\n          d=\"m 70,67 h -40 c 0,0 -7.5,-0.802118 -7.5,-8.365747 0,-7.563629 7.5,-8.634253 7.5,-8.634253 h 20\"\r\n        />\r\n      </svg>\r\n\r\n      <div className=\"ad-menu-overlay \" id=\"ad-menu-overlay\">\r\n        <nav className=\"ad-menu-overlay-menu\">\r\n          <ul>\r\n            <li>\r\n              <h2>\r\n                Graphic Design & Art Direction. Website under construction.\r\n              </h2>\r\n            </li>\r\n            <li>\r\n              <a\r\n                href=\"https://www.instagram.com/adamnjdale/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                title=\"Adam Dale Instagram\"\r\n              >\r\n                Instagram\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                href=\"mailto:hello@adamjdale.com?subject=Let's work together...&body=Send me a message describing what you're looking to achieve... \"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                title=\"Contact Adam Dale at hello@adamjdale.com\"\r\n              >\r\n                Contact\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n\r\n      <Link to=\"/\" className=\"ad-logo\">\r\n        <h1>Adam</h1>\r\n      </Link>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","// import react packages\r\nimport React from \"react\";\r\n\r\nconst Slideshow = () => {\r\n  return <div id=\"rbgShiftSlider\" className=\"rgbShiftSlider\"></div>;\r\n};\r\n\r\nexport default Slideshow;\r\n","// import react packages\r\nimport React, { Component } from \"react\";\r\n\r\n// import components\r\nimport Navbar from \"../Components/Navbar/Navbar\";\r\nimport Slideshow from \"../Components/Slideshow/Slideshow\";\r\n\r\nclass Home extends Component {\r\n  onMenuClick = () => {\r\n    if (\r\n      !document.getElementById(\"ad-menu\").classList.contains(\"ad-menu--active\")\r\n    ) {\r\n      document.getElementById(\"ad-menu\").classList.toggle(\"ad-menu--active\");\r\n      document\r\n        .getElementById(\"ad-menu-overlay\")\r\n        .classList.toggle(\"ad-menu-overlay--open\");\r\n    } else {\r\n      document.getElementById(\"ad-menu\").classList.remove(\"ad-menu--active\");\r\n      document\r\n        .getElementById(\"ad-menu-overlay\")\r\n        .classList.remove(\"ad-menu-overlay--open\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"container ad-container\">\r\n          <Navbar onMenuClick={this.onMenuClick} />\r\n        </div>\r\n        <Slideshow />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// import react packages\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// import styles\r\nimport \"./App.scss\";\r\n\r\n// import components\r\nimport Home from \"../Views/Home\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"\" component={Home} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// import react packages\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// import serviceworker\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// import react component\r\nimport App from \"./App/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"adamWebsite\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}